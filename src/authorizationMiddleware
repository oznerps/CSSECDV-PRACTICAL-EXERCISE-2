// app.js (main application entry)
const express = require('express');
const path = require('path');
const app = express();

// Authentication middleware
const { authenticateUser } = require('./middleware/authenticationMiddleware');
// Authorization middleware (C1)
const { requireRole, requirePermission } = require('./middleware/authorizationMiddleware');
// User service for deleteUser
const { deleteUser } = require('./services/userService');

// Routes with C1 enforcement

// Admin dashboard (requires 'admin_access' permission)
app.get('/admin',
  authenticateUser,
  requirePermission('admin_access'),
  (req, res) => res.render('admin-dashboard')
);

// User management (requires 'admin' or 'manager' role)
app.get('/users',
  authenticateUser,
  requireRole(['admin', 'manager']),
  (req, res) => res.render('user-management')
);

// Profile editing (requires 'edit_profile' permission)
app.get('/profile',
  authenticateUser,
  requirePermission('edit_profile'),
  (req, res) => res.render('profile')
);

// Delete user API (requires 'admin' role and 'manage_users' permission)
app.delete('/api/users/:id',
  authenticateUser,
  requireRole(['admin']),
  requirePermission('manage_users'),
  async (req, res) => {
    try {
      await deleteUser(req.params.id);
      res.json({ success: true });
    } catch(err) {
      console.error('Error deleting user:', err);
      res.status(500).json({ error: 'Failed to delete user' });
    }
  }
);

// Start server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server listening on port ${PORT}`));

/* -------------------------------------------------------------------------- */
/* middleware/authorizationMiddleware.js                                      */
/* -------------------------------------------------------------------------- */

const { getUserRoles, userHasPermission } = require('../services/authorizationService');

/**
 * Middleware to enforce role-based access control.
 * @param {string[]} allowedRoles - Array of role names allowed to access the route
 */
function requireRole(allowedRoles) {
  return async (req, res, next) => {
    try {
      if (!req.user || !req.user.id) {
        return res.status(401).json({ error: 'Authentication required' });
      }
      const roles = await getUserRoles(req.user.id);
      if (!roles.some(role => allowedRoles.includes(role.name))) {
        return res.status(403).json({ error: 'Insufficient permissions' });
      }
      next();
    } catch (err) {
      console.error('Authorization check failed:', err);
      res.status(500).json({ error: 'Authorization check failed' });
    }
  };
}

/**
 * Middleware to enforce permission-based access control.
 * @param {string} requiredPermission - Permission name required to access the route
 */
function requirePermission(requiredPermission) {
  return async (req, res, next) => {
    try {
      if (!req.user || !req.user.id) {
        return res.status(401).json({ error: 'Authentication required' });
      }
      if (!await userHasPermission(req.user.id, requiredPermission)) {
        return res.status(403).json({ error: 'Insufficient permissions' });
      }
      next();
    } catch (err) {
      console.error('Permission check failed:', err);
      res.status(500).json({ error: 'Permission check failed' });
    }
  };
}

module.exports = {
  requireRole,
  requirePermission,
};
